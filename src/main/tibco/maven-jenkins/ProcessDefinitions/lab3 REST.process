<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx6="http://www.tibco.com/schemas/Lab3/Schemas/Schema.xsd" xmlns:pfx7="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/Schema.xsd" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/weather.xsd" xmlns:pfx="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/dataForma.xsd" xmlns:pfx9="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/weatherSchema.xsd" xmlns:pfx2="http://www.tibco.com/schemas/lab/JSON_GEN_Schemas/Schema.xsd" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/addressSchema.xsd" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/waetherDada.xsd" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/waetherSchema.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns1="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns4="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns3="http://www.tibco.com/schemas/Logging/Schemas/Schema.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns6="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns5="http://schemas.tibco.com/bw/plugins/xml/5.0/xmlExceptions" xmlns:ns7="http://www.tibco.com/schemas/maven-jenkins/Schemas/Schema.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx11="http://www.tibco.com/schemas/lab3/Schema/Schema1.xsd4" xmlns:pfx12="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/Schema.xsd3" xmlns:pfx10="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/current.xsd">
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/dataForma.xsd" schemaLocation="/JSON_GEN_Schemas/dataForma.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/lab/JSON_GEN_Schemas/Schema.xsd" schemaLocation="/JSON_GEN_Schemas/adress_Costom.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/addressSchema.xsd" schemaLocation="/JSON_GEN_Schemas/addressSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/Lab3/Schemas/Schema.xsd" schemaLocation="/Schemas/Start.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/waetherSchema.xsd" schemaLocation="/JSON_GEN_Schemas/waetherSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/waetherDada.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/weatherSchema.xsd" schemaLocation="/JSON_GEN_Schemas/weatherSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/JSON_GEN_Schemas/current.xsd" schemaLocation="/JSON_GEN_Schemas/current.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/lab3/Schema/Schema1.xsd4" schemaLocation="/Schemas/WeatherApiRest.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/Schema.xsd3" schemaLocation="/JSON_GEN_Schemas/weather.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/Lab3/JSON_GEN_Schemas/Schema.xsd" schemaLocation="/JSON_GEN_Schemas/WeatherSchema.xsd"/>
    <pd:name>ProcessDefinitions/lab3 REST.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType ref="pfx6:root"/>
    <pd:startX>41</pd:startX>
    <pd:startY>201</pd:startY>
    <pd:returnBindings>
        <xsl:copy-of select="if(exists($Get-weather-locally/pfx7:JSON/pfx7:coord) ) then $Get-weather-locally/pfx7:JSON  else $Parse-Weather-JSON/ns:ActivityOutputClass/pfx7:JSON"/>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx7:JSON"/>
    <pd:endX>999</pd:endX>
    <pd:endY>449</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1618321519140</pd:targetNamespace>
    <pd:activity name="Parse Address JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>452</pd:x>
        <pd:y>200</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ValidateOutputEnable>false</ValidateOutputEnable>
            <ActivityOutputEditor ref="pfx10:JSON"/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="$REST-GET-Address/ns:RESTOutput/body/asciiContent"/>
                </jsonString>
            </ns:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="REST GET Address">
        <pd:type>com.tibco.plugin.json.activities.RestActivity</pd:type>
        <pd:resourceType>ae.activities.RestActivity</pd:resourceType>
        <pd:x>284</pd:x>
        <pd:y>200</pd:y>
        <config>
            <enableProtocolUI>None</enableProtocolUI>
            <restMethodUI>GET</restMethodUI>
            <restResponseType>JSON</restResponseType>
            <authChoiceUI>No Authentication</authChoiceUI>
            <WADLPaths/>
            <WADLBaseURL/>
            <restMethodIDUI/>
            <restURI>https://api-adresse.data.gouv.fr/search/</restURI>
            <richOutputEnableUI>true</richOutputEnableUI>
            <restInputReferNode>
                <xsd:element name="Parameters">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Query" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="q" type="xsd:string"/>
                                        <xsd:element name="postcode" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="Header" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="Body" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="Form" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Text" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" type="xsd:string" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Binary" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" type="xsd:base64Binary" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Multipart" minOccurs="0" maxOccurs="unbounded">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="content-disposition" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="name" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="filename" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content-type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content-id" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" minOccurs="0">
                                                        <xsd:complexType>
                                                            <xsd:choice>
                                                                <xsd:element name="binary" type="xsd:base64Binary"/>
                                                                <xsd:element name="text" type="xsd:string"/>
                                                                <xsd:element name="fileName" type="xsd:string"/>
                                                            </xsd:choice>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </restInputReferNode>
            <restOutputReferNode>
                <xsd:element name="header">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Server" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Location" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Allow" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Date" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Set-Cookie" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Length" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Encoding" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Range" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Last-Modifie" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </restOutputReferNode>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <ns:Parameters>
                    <Query>
                        <q>
                            <xsl:value-of select="$Start/pfx6:root/pfx6:address"/>
                        </q>
                        <postcode>
                            <xsl:value-of select="$Start/pfx6:root/pfx6:postcode"/>
                        </postcode>
                    </Query>
                </ns:Parameters>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>548</pd:x>
        <pd:y>55</pd:y>
        <pd:width>380</pd:width>
        <pd:height>275</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$Parse-Address-JSON/ns:ActivityOutputClass/JSON/features</pd:over>
            <pd:iterationElementSlot>current</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:activityOutputName/>
            <pd:accumulateOutput>false</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>REST GET Weather</pd:to>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Parse Weather JSON</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>REST GET Weather</pd:from>
            <pd:to>Parse Weather JSON</pd:to>
            <pd:xpathDescription>ok</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$REST-GET-Weather/ns:RESTOutput/StatusCode=200</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>REST GET Weather</pd:from>
            <pd:to>Generate Error HTTP GET weather</pd:to>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-26368</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:activity name="REST GET Weather">
            <pd:type>com.tibco.plugin.json.activities.RestActivity</pd:type>
            <pd:resourceType>ae.activities.RestActivity</pd:resourceType>
            <pd:x>646</pd:x>
            <pd:y>119</pd:y>
            <config>
                <enableProtocolUI>None</enableProtocolUI>
                <restMethodUI>GET</restMethodUI>
                <restResponseType>JSON</restResponseType>
                <authChoiceUI>No Authentication</authChoiceUI>
                <WADLPaths/>
                <WADLBaseURL/>
                <restMethodIDUI/>
                <restURI>https://api.openweathermap.org/data/2.5/weather</restURI>
                <richOutputEnableUI>true</richOutputEnableUI>
                <trustAllHostUI>false</trustAllHostUI>
                <restInputReferNode>
                    <xsd:element name="Parameters">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Query">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="lat" type="xsd:string"/>
                                            <xsd:element name="lon" type="xsd:string"/>
                                            <xsd:element name="appid" type="xsd:string"/>
                                            <xsd:element name="mode" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Header" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Body" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Form" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Text" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" type="xsd:string" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Binary" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" type="xsd:base64Binary" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Multipart" minOccurs="0" maxOccurs="unbounded">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="content-disposition" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="name" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="filename" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content-type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content-id" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" minOccurs="0">
                                                            <xsd:complexType>
                                                                <xsd:choice>
                                                                    <xsd:element name="binary" type="xsd:base64Binary"/>
                                                                    <xsd:element name="text" type="xsd:string"/>
                                                                    <xsd:element name="fileName" type="xsd:string"/>
                                                                </xsd:choice>
                                                            </xsd:complexType>
                                                        </xsd:element>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </restInputReferNode>
                <restOutputReferNode>
                    <xsd:element name="header">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Server" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Location" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Allow" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Date" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Set-Cookie" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Length" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Encoding" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Range" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Last-Modifie" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </restOutputReferNode>
            </config>
            <pd:inputBindings>
                <ns:ActivityInput>
                    <ns:Parameters>
                        <Query>
                            <lat>
                                <xsl:value-of select="$current/features/geometry/coordinates[2]"/>
                            </lat>
                            <lon>
                                <xsl:value-of select="$current/features/geometry/coordinates[1]"/>
                            </lon>
                            <appid>
                                <xsl:value-of select="&quot;5c77f220e87cf1913b36a3bd0d8c709a&quot;"/>
                            </appid>
                        </Query>
                    </ns:Parameters>
                </ns:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate Error HTTP GET weather">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>805</pd:x>
            <pd:y>255</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns4:ActivityInput>
                    <message>
                        <xsl:value-of select="concat(&quot; HTTP error : &quot;, $REST-GET-Weather/ns:RESTOutput/StatusCode ,&quot; &quot;,$REST-GET-Weather/ns:RESTOutput/ReasonPhrase,&quot; &quot;)"/>
                    </message>
                    <messageCode>
                        <xsl:value-of select="$REST-GET-Weather/ns:RESTOutput/StatusCode"/>
                    </messageCode>
                </ns4:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Parse Weather JSON">
            <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
            <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
            <pd:x>809</pd:x>
            <pd:y>121</pd:y>
            <config>
                <SchemaType>xsdType</SchemaType>
                <BadgerfishCheck>false</BadgerfishCheck>
                <ValidateOutputEnable>true</ValidateOutputEnable>
                <ActivityOutputEditor ref="pfx7:JSON"/>
            </config>
            <pd:inputBindings>
                <ns:ActivityInputClass>
                    <jsonString>
                        <xsl:value-of select="$REST-GET-Weather/ns:RESTOutput/body/asciiContent"/>
                    </jsonString>
                </ns:ActivityInputClass>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Catch all">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>1257</pd:x>
        <pd:y>445</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Logging Errors">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1131</pd:x>
        <pd:y>447</pd:y>
        <config>
            <processName>/ProcessDefinitions/LoggingProcess.process</processName>
        </config>
        <pd:inputBindings>
            <ns3:LogInfo>
                <ns3:idtech>
                    <xsl:value-of select="concat(&quot;Lab3 - &quot;,$_processContext/ns2:ProcessContext/ProcessId,&quot; - &quot;, tib:timestamp())"/>
                </ns3:idtech>
                <ns3:idfonc>
                    <xsl:value-of select="concat(&quot;Client-unkown - &quot;,string(tib:timestamp()) )"/>
                </ns3:idfonc>
                <ns3:status>
                    <xsl:value-of select="&quot;error&quot;"/>
                </ns3:status>
                <ns3:logmessage>
                    <xsl:value-of select="if(string-length( $Catch-all/exceptiondata/*)>254) then substring($Catch-all/exceptiondata/*, 1, 254) else $Catch-all/exceptiondata/*"/>
                </ns3:logmessage>
                <ns3:idProcess>
                    <xsl:value-of select="$_processContext/ns2:ProcessContext/ProcessId"/>
                </ns3:idProcess>
            </ns3:LogInfo>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log success End of process">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1147</pd:x>
        <pd:y>224</pd:y>
        <config>
            <processName>/ProcessDefinitions/LoggingProcess.process</processName>
        </config>
        <pd:inputBindings>
            <ns3:LogInfo>
                <ns3:idtech>
                    <xsl:value-of select="concat(&quot;Lab3 - &quot;,$_processContext/ns2:ProcessContext/ProcessId,&quot; - &quot;, tib:timestamp())"/>
                </ns3:idtech>
                <ns3:idfonc>
                    <xsl:value-of select="concat(&quot;Client-unkown - &quot;,string(tib:timestamp()) )"/>
                </ns3:idfonc>
                <ns3:status>
                    <xsl:value-of select="&quot;success&quot;"/>
                </ns3:status>
                <ns3:logmessage>
                    <xsl:value-of select="concat(&quot;End of process : &quot;,$_processContext/ns2:ProcessContext/ProcessId)"/>
                </ns3:logmessage>
                <ns3:idProcess>
                    <xsl:value-of select="$_processContext/ns2:ProcessContext/ProcessId"/>
                </ns3:idProcess>
            </ns3:LogInfo>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Error HTTP GET address">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>286</pd:x>
        <pd:y>336</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns4:ActivityInput>
                <message>
                    <xsl:value-of select="concat(&quot; HTTP error : &quot;,$REST-GET-Address/ns:RESTOutput/StatusCode,&quot; &quot;,$REST-GET-Address/ns:RESTOutput/ReasonPhrase,&quot; &quot;)"/>
                </message>
                <messageCode>
                    <xsl:value-of select="$REST-GET-Address/ns:RESTOutput/StatusCode"/>
                </messageCode>
            </ns4:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Error adress not found">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>454</pd:x>
        <pd:y>335</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns4:ActivityInput>
                <message>
                    <xsl:value-of select="&quot; The given address is not correct &quot;"/>
                </message>
            </ns4:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Initial Log">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>149</pd:x>
        <pd:y>206</pd:y>
        <config>
            <processName>/ProcessDefinitions/LoggingProcess.process</processName>
        </config>
        <pd:inputBindings>
            <ns3:LogInfo>
                <ns3:idtech>
                    <xsl:value-of select="concat(&quot;Lab3 - &quot;,$_processContext/ns2:ProcessContext/ProcessId,&quot; - &quot;, tib:timestamp())"/>
                </ns3:idtech>
                <ns3:idfonc>
                    <xsl:value-of select="concat(&quot;Client-unkown - &quot;,string(tib:timestamp()) )"/>
                </ns3:idfonc>
                <ns3:status>
                    <xsl:value-of select="&quot;initial&quot;"/>
                </ns3:status>
                <ns3:logmessage>
                    <xsl:value-of select="concat(&quot;Start process  : &quot;,$_processContext/ns2:ProcessContext/ProcessId)"/>
                </ns3:logmessage>
                <ns3:idProcess>
                    <xsl:value-of select="$_processContext/ns2:ProcessContext/ProcessId"/>
                </ns3:idProcess>
            </ns3:LogInfo>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>285</pd:x>
        <pd:y>58</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns4:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns2:ErrorReport/Msg"/>
                </message>
                <messageCode>
                    <xsl:value-of select="$_error/ns2:ErrorReport/MsgCode"/>
                </messageCode>
            </ns4:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Get weather locally">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>150</pd:x>
        <pd:y>456</pd:y>
        <config>
            <processName>/ProcessDefinitions/Get weather locally.process</processName>
        </config>
        <pd:inputBindings>
            <address>
                <xsl:value-of select="concat(tib:trim($Start/pfx6:root/pfx6:address),&quot; &quot;, normalize-space($Start/pfx6:root/pfx6:postcode))"/>
            </address>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SSV_list">
        <pd:type>com.tibco.pe.core.SetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.setSharedVariable</pd:resourceType>
        <pd:x>1143</pd:x>
        <pd:y>82</pd:y>
        <config>
            <variableConfig>/SharedVars/address.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings>
            <ns7:list>
                <ns7:listItem>
                    <ns7:address>
                        <xsl:value-of select="lower-case(tib:trim(concat(tib:trim($Start/pfx6:root/pfx6:address),&quot; &quot;, tib:trim($Start/pfx6:root/pfx6:postcode))))"/>
                    </ns7:address>
                    <ns7:datetime>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns7:datetime>
                    <ns7:weather>
                        <xsl:value-of select="tib:render-xml($Parse-Weather-JSON/ns:ActivityOutputClass/pfx7:JSON,1)"/>
                    </ns7:weather>
                </ns7:listItem>
                <xsl:copy-of select="$GSV_list/ns7:list/ns7:listItem"/>
            </ns7:list>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GSV_list">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>1024</pd:x>
        <pd:y>83</pd:y>
        <config>
            <variableConfig>/SharedVars/address.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>REST GET Address</pd:from>
        <pd:to>Parse Address JSON</pd:to>
        <pd:xpathDescription>ok</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$REST-GET-Address/ns:RESTOutput/StatusCode=200</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Address JSON</pd:from>
        <pd:to>Generate Error adress not found</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-26368</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>GSV_list</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse Address JSON</pd:from>
        <pd:to>Group</pd:to>
        <pd:xpathDescription>exists</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($Parse-Address-JSON/ns:ActivityOutputClass/JSON/features[1]/type)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch all</pd:from>
        <pd:to>Logging Errors</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Logging Errors</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>REST GET Address</pd:from>
        <pd:to>Generate Error HTTP GET address</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-26368</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Initial Log</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>REST GET Address</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Get weather locally</pd:from>
        <pd:to>REST GET Address</pd:to>
        <pd:xpathDescription>not found</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Get weather locally</pd:from>
        <pd:to>End</pd:to>
        <pd:xpathDescription>exists locally</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($Get-weather-locally/pfx7:JSON/pfx7:weather)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Initial Log</pd:from>
        <pd:to>Get weather locally</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GSV_list</pd:from>
        <pd:to>SSV_list</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SSV_list</pd:from>
        <pd:to>Log success End of process</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log success End of process</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>